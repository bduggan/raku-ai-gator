#!/usr/bin/env raku

use AI::Gator;
use AI::Gator::Tools;
use TOML;
use Log::Async <warning color use-args>;
use JSON::Fast;
use Terminal::ANSI::OO 't';
use HTTP::Tiny;
use Prompt;

my $*GATOR-HOME = (%*ENV<AI_GATOR_HOME> // $*HOME.child('ai-gator')).IO;
$*GATOR-HOME.d or do {
  warning "$*GATOR-HOME not found, creating it.";
  mkdir $*GATOR-HOME;
}

my $conf-file = $*GATOR-HOME.child('config.toml');
warning "Missing config file $conf-file." unless $conf-file.IO.e;
my $conf = from-toml($conf-file.IO.slurp) if $conf-file.IO.e;
warning "No configuration, using defaults." unless $conf;

my $base-uri = $conf<url>;
my $session-dir = $*GATOR-HOME.child('sessions');
my $history = $*GATOR-HOME.child('.history');
my $*tool-dir = $*GATOR-HOME.child('tools');

#| List available tools
multi MAIN('tools') {
  info "looking for tools in $*tool-dir";
  my $tools = get-tools;
  for $tools.map: *<spec><function><name description> -> ( $name, $desc ) {
    say $name ~ ' : ';
    say $desc.indent(5);
  }
}

#| Try out a tool in a debug repl
multi MAIN('tool', $name) {
  my $spec = get-tool-spec($name);
  say to-json $spec;
  exit unless $spec;
  my &tool := get-tool($name);
  say "loaded $name as tool.  Try calling &tool";
  repl;
}

sub get-input(:$history) {
  my $p = Prompt.new: :editor<LineEditor>, :$history;
  my $all;
  my $prompt = t.green ~ "You:" ~ t.text-reset ~ ' ';
  loop {
    my $line = $p.readline($prompt);
    last unless $line;
    $all ~= $line;
    last unless $line.ends-with('\\' | '+');
    $line = $line.substr(0, *-1).trim; # remove trailing \ or +
  }
  $p.save-history;
  $all;
}

#| Start an AI Gator session
multi MAIN(
   Str :$model = ($conf<default_model> // $conf<model> // 'gpt-4.4o') #= The name of the model, e.g. 'gpt-4o'
) {
  my $adapter-conf = 'AI::Gator';
  my $session-class-conf = 'AI::Gator::Session';
  with $conf<adapter> -> $adapter {
    $adapter-conf = "AI::Gator::$adapter";
    $session-class-conf = "AI::Gator::Session::$adapter";
  }
  with $conf<default_dir> -> $dir is copy {
    unless $dir.IO.is-absolute {
      $dir = $*HOME.child($dir);
    }
    chdir $dir or die "could not change to $dir";
    info "changed to $dir";
  }

  info "model $model, adapter $adapter-conf";
  info "session class $session-class-conf";
  my AI::Gator $adapter-class = $adapter-conf.EVAL.new;
  my $session-class = $session-class-conf.EVAL.new;

  my $client = $adapter-class.new: :$model, tools => get-tools, |%( $base-uri ?? :$base-uri !! Empty);
  my $session = $session-class.new: :$session-dir;

  say "Type ^D to exit.";
  loop {
    unless $session.last-finish-reason.fc eq 'tool_calls'.fc {
      my $content = get-input(:$history) // last;
      $session.add-message($content);
    }

    my $response = $client.get-response($session);

    $client.do-tool-calls($session); 
    debug "done with tool calls and response is { $response.raku }";
    $response ||= $client.get-response($session);
    $session.add-message: :role<assistant>, $response if $response;
  }
  $session.save(summary => $client.summarize($session)) if $session.messages > 3;
} 
